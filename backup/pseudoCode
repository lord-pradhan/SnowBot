# Pseudo code for RasPi

void setup(){
	Brain = Brain();
	
}

void loop(){
	
	if (checkEMButton == 1){ Brain.EMProc(); }
	
	state = Brain.state();
		
	if (state == stuck){ Brain.stuckProc(); }

	else if (state== null){ Brain.nullProc(); } 
	
	else if (state == initialn){ Brain.initProc(); }
	
	else if (state == thinking){ Brain.thinkProc(); }
	
	else if (state == driveD){ Brain.driveDProc(); }
	
	else if (state == driveE){ Brain.driveEProc(); }
	
	else if (state == dump){ Brain.dumpProc(); }
	
	else if (state == retrace){ Brain.retraceProc(); }
	
	else if (state == readyMoveIn){ Brain.readyMoveInProc(); }
	
	else if (state == lastDump){ Brain.lastDumpProc(); }
	
	else if (state == home){ Brain.homeProc(); }
	
	elseif (state == error){ Brain.errorProc(); }
	
	else Brain.errorProc();	
}


####-------- Main class and member func definitions --------###

class Brain{
	
	def __init__( self ){
		
		initProc();		
		initVariables(self);
		self.state = initialn;
	}
	
	def initVariables(){
		
		Plow.state = disengage;
	}
	
	def EMProc(self){
		
		cutPower();		
	}
	
	def stuckProc(self){
		
		self.motorRPM = 0;
		self.state = initialn;
		raisePlow();
	}
	
	def initProc(self){
		
		handshakeArduino();
		queryArduino();
		self.X = readBeacon();
		
		checkListInit(); # check if comms and localisation works
		if (checkListInit==1) {self.state = thinking}
	}
	
	def thinkProc(self){
		
		readMap();
		planContours();
		checkListThink(); # check if contours succesfully planned
		if (checkListThink==1){self.state = driveD}
	}	
	
	def driveDProc(self){
		
		if (checkStuck == 1) {self.state = stuck}
			
		
		if( dist(gamma_min, self.state) > L_init ) {
			
			contours.loopnum = 1;
			[self.motorRPM, gamma_prev, gamma_min] = runController(gamma_prev, contours, gamma_min=default);
		}
		
		else{
			self.motorRPM = 0
			lowerPlow();
			Plow.state = engage;
			contours.initMark =  gamma_min;
			if (checkListDriveD == 1) { self.state = driveE; }
		}
	}
	
	def driveEProc(self){
		
		if (checkStuck == 1){self.state = stuck}
		
		else if (reachedDumpMarker==1){ self.state = dump }
		
		else if (completedLoop == 1){ self.state = readyMoveIn }
		
		else {
		
			# move along contour
			[self.motorRPM, gamma_prev, gamma_min] = runController(gamma_prev, contours, gamma_min=default)
		}
		
		
	}
	
	def dumpProc(self){
	
		if (checkStuck == 1) {self.state = stuck; break}
		
		if (minLengthCovered == 0){ self.state = driveE; break; }
		
		# pass outer boundary as contour to controller
	}
};


###------- Auxilliary class definitions ----- #####

class X{

	def __init__(self, x, y, theta){
		
		self.x = x; self.y = y ; self.theta = theta;
	}
};

class X_est{

	def __init__(self, x, y, theta){
		
		self.x = x; self.y = y ; self.theta = theta;
	}
};

class MotorRPM;

class Contours{
	
	def __init__(boundary, loops, ):
		self. 
};


